Do Research
Java Stream API
1/. Stream base on data type
      - Generic Stream (Used for processing objects)
      - Primitive Streams ( Primitive streams have specialized methods like sum(), average(), and min() to optimize     performance.)

2/. Stream base on source
     - Collection Streams (collections like List, Set, or Map using the .stream() or .parallelStream() methods)
        List<String> list = Arrays.asList("a", "b", "c");
        Stream<String> stream = list.stream();
     - Array Streams (Created from arrays using Arrays.stream())
        String[] array = {"a", "b", "c"};
        Stream<String> stream = Arrays.stream(array);
     - File Streams (Created to process file content using classes like Files.lines() or BufferedReader.lines())
        Stream<String> lines = Files.lines(Paths.get("file.txt"));
     - Stream Builders (Created using Stream.builder() or Stream.of())
        Stream<String> stream = Stream.of("a", "b", "c");
     - Infinite Streams (Generated using Stream.generate() or Stream.iterate() for potentially unbounded data)
        Stream<Integer> infiniteStream = Stream.iterate(0, n -> n + 1);
3/. Streams Based on Processing Mode
     - Sequential Streams (Process elements in a sequential order, one by one)
       Created using .stream()
     - Parallel Streams (Process elements in parallel, utilizing multiple threads for faster execution)
       Created using .parallelStream() or converting a sequential stream using .parallel()

Generic Stream: Stream<T>
Primitive Streams: IntStream, LongStream, DoubleStream
Source Streams: Collection, Array, File, Builder, Infinite Streams
Processing Modes: Sequential, Parallel Streams
       